[{"id":"content:0.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     nitro-applicationinsights    Application Insights  integration for   nitro .     Server-side integration of    applicationinsights  for nitro  Easy setup  Hookable       Runtime configuration   Configure applicationinsights at startup or in your nitro configuration.    Integrate nitro-opentelemetry   Use OTEL's API    Auto track request   All your outgoing responses are tracked automatically. Responses are correlated to the incoming request.   Features  "},{"id":"content:1.guide:1.getting-started.md","path":"/guide/getting-started","dir":"guide","title":"Getting Started","description":"Get applicationinsights on nitro in a few minutes.","keywords":["Play online","Install it on your project"],"body":"  Getting Started  Get applicationinsights on nitro in a few minutes.  Play online  You can start playing with nitro-applicationinsights in your browser using Stackblitz:  Play on StackBlitz  Install it on your project   Add the module to your dependencies      npm   install   nitro-applicationinsights\n     yarn   install   nitro-applicationinsights\n     pnpm   install   nitro-applicationinsights\n   Add the module into your config     export   default   defineNitroConfig  ({\n     modules: [  'nitro-applicationinsights'  ]\n   })\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.guide:2.how-does-it-work.md","path":"/guide/how-does-it-work","dir":"guide","title":"How does it works ?","description":"nitro-applicationinsights is simply a package which provides a plugin for nitro.","keywords":[],"body":"  How does it works ?   nitro-applicationinsights  is simply a package which provides a plugin for nitro.  It setup the default client of   applicationinsights  on nitro start up. You can configure this by hooking into the   applicationinsights:config  hook of nitro.  Since   applicationinsights  v3 uses Opentelemetry under the hood, this nitro plugin also run   nitro-opentelemetry .  Automated traces  The   nitro-opentelemetry  plugin will automatically trace all your incoming and outgoing request from your Nitro server.\nThis means that you don't need to call   defaultClient.trackDependency()  yourself."},{"id":"content:1.guide:3.runtime-configuration.md","path":"/guide/runtime-configuration","dir":"guide","title":"Runtime configuration","description":"You can configure applicationinsights either through the runtime config or hooks.","keywords":[],"body":"  Runtime configuration  You can configure   applicationinsights  either through the runtime config or hooks.  The runtime configuration will have a reserved property called   applicationinsights  for you to pass the configuration of   applicationinsights :     type   TNitroAppInsightsConfig   =   {\n     connectionString  ?:   string\n     autoCollectRequests  :   boolean\n     autoCollectConsole  :   boolean   |   {  value  :   boolean  ,   collectConsoleLogs  :   boolean  }\n     autoCollectDependencies  :   boolean\n     autoCollectExceptions  :   boolean\n     autoCollectPerformance  :   {  value   :  boolean  ,   collectExtendedMetrics  :   boolean  }\n     autoCollectHeartbeat  :   boolean\n     autoCollectIncomingRequestAzureFunctions  :   boolean\n     autoCollectPreAggregatedMetrics  :   boolean\n     autoDependencyCorrelation  :   boolean   |   {  value   :  boolean  ,   useAsyncHooks   :  boolean  }\n     enableWebInstrumentation  :   boolean   |   {  value  :   boolean  ,   WebSnippetConnectionString  ?:   string  }\n     distributedTracingMode  :   DistributedTracingModes\n     sendLiveMetrics  :  boolean\n     internalLogging  :   {  enableDebugLogging  ?:   boolean  ,   enableWarningLogging  ?:   boolean  }\n     useDiskRetryCaching  :   boolean\n   }\n   See more at the   hook documentation  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.guide:4.event-handlers.md","path":"/guide/event-handlers","dir":"guide","title":"Event handlers","description":"In order to keep the Opentelemetry context within your event handlers, you need to wrap your own with defineTracedHandler from nitro-opentelemetry/runtime/utils:","keywords":[],"body":"  Event handlers  In order to keep the Opentelemetry context within your event handlers, you need to wrap your own with   defineTracedHandler  from   nitro-opentelemetry/runtime/utils :     // this is also auto-imported\n   import   { defineTracedEventHandler }   from   \"nitro-opentelemetry/runtime/utils\"\n   \n   export   default   defineTracedEventHandler  (()   =>   {\n       return   \"Hello World !\"\n   })\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.guide:4.migration.md","path":"/guide/migration","dir":"guide","title":"Migration","description":"","keywords":["From 1.0.0 to 1.0.1","From 0.x to 1.x"],"body":"  Migration  From 1.0.0 to 1.0.1  Following   nitro-opentelemetry v0.7.0 ,   event.context.span  has been moved to   event.otel.span  From 0.x to 1.x  Moving to Applicationinsights 3 and Opentelemetry  See   Microsoft applicationinsights documentation  for changes from applicationinsights 2 to 3.  See   nitro-opentelemetry    H3Event.$appInsights  has been removed in favor of Opentelemetry Span.   applicationinsights:trackError:before  has been removed.   applicationinsights:context:tags  has been removed. You can use   H3Event.context.span.setAttributes()  instead.   applicationinsights:trackRequest:before  has been removed. You can use   otel:span:end  nitro-opentelemetry hook instead.   applicationinsights:trackError:before  has been removed. You can directly hook into the error hook from nitro instead.  You need to wrap all your event handlers with   defineTracedEventHandler . See   event handlers"},{"id":"content:2.api:1.hooks.md","path":"/api/hooks","dir":"api","title":"Hooks","description":"Available hooks through Nitro","keywords":[],"body":"  Hooks  Available hooks through Nitro     Hook  Arguments  Description  |   applicationinsights:setup               | context: { client:   TelemetryClient , configuration:   Configuration  }               | Triggered when the applicationinsights client is setup but not initialized                               |  |   applicationinsights:ready               | context: { client:   TelemetryClient  }                                                    | Triggered when the applicationinsights client is ready and initialized                              |"}]